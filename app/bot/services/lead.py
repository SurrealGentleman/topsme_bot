import asyncio
from datetime import datetime, timezone

from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.bot_instance import bot
from app.bot.keyboards.keyboards import get_take_keyboard
from app.bot.services.api import post_bitrix_request_aio
from app.bot.services.db import create_lead_in_db, map_bitrix_to_telegram, checking_free_lead, assigning_agent_lead, \
    checking_is_agent, checking_free_agent, check_is_comment_by_lead
from app.bot.services.message_utils import create_new_lead_message, create_text_send_message
from app.config.settings import get_settings


settings = get_settings()


'''–ü—Ä–æ—Ü–µ—Å—Å: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –ª–∏–¥–µ -> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ—ã –≤ –±–¥ -> –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ -> –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ —Ç–≥'''
async def process_new_lead(lead_id: str, session: AsyncSession):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ
    lead_data = await post_bitrix_request_aio(endpoint="crm.deal.get", json={"id": lead_id})
    lead_data_detail = lead_data.get("result", {})

    if lead_data_detail.get("CATEGORY_ID") == settings.BITRIX_FUNNEL_CATEGORY_ID_LEAD:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –≤ –±–¥
        await create_lead_in_db(
            session=session,
            bitrix_id=lead_data_detail["ID"],
            title=lead_data_detail.get("TITLE"),
            budget=lead_data_detail.get("OPPORTUNITY"),
            currency=lead_data_detail.get("CURRENCY_ID"),
            lead_type=lead_data_detail.get("TYPE_ID")
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã –≤ Bitrix24
        response = await post_bitrix_request_aio(endpoint="sonet_group.user.get", json={"ID": settings.BITRIX_GROUP_ID})
        users_in_group = response.get("result", [])
        agents = await map_bitrix_to_telegram(users_in_group, session)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        await asyncio.gather(*[
            send_lead_to_agent(agent["telegram_id"], lead_data)
            for agent in agents
        ], return_exceptions=True)


'''–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É'''
async def take_lead_and_get_details(callback, state: FSMContext):
    lead_id = callback.data.split("_")[1]
    telegram_id = callback.from_user.id
    # lang = await get_lang_at_agent(telegram_id=telegram_id)

    free_lead = await checking_free_lead(lead_id=lead_id)

    if free_lead["success"]: # –∑–∞—è–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞
        agent = await checking_is_agent(telegram_id=telegram_id)
        if agent["success"]: # –∞–≥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            free_agent = await checking_free_agent(agent_id=agent["value"].id)
            if free_agent["success"]: # –∞–≥–µ–Ω—Ç —Å–≤–æ–±–æ–¥–µ–Ω
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤ –±–∞–∑–µ
                await assigning_agent_lead(lead=free_lead["value"], agent=agent["value"])
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤ Bitrix
                print("free_lead[value].bitrix_id", free_lead["value"].bitrix_id)
                print("agent[value].bitrix_user_id", agent["value"].bitrix_user_id)
                await post_bitrix_request_aio(endpoint="crm.deal.update.json", json={
                    "id": free_lead["value"].bitrix_id,
                    "fields":{"ASSIGNED_BY_ID": agent["value"].bitrix_user_id}
                })
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                asyncio.create_task(schedule_comment_reminder(lead=free_lead["value"], agent=agent["value"], state=state))
                return {"success": True}
            else:
                return {"success": False, "message": "agent_busy"}
        else:
            pass # –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    else:
        return {"success": False, "message": "lead_busy"}


'''–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –∞–≥–µ–Ω—Ç–∞–º'''
async def send_lead_to_agent(telegram_id: int, lead: dict):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = await create_new_lead_message(telegram_id=telegram_id, lead=lead)
        if not text["success"]:
            return {"success": False}
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        print("lead", lead)
        try:
            reply_markup = await get_take_keyboard(telegram_id=telegram_id, lead_id=lead["result"]["ID"])
        except KeyError as k:
            reply_markup = await get_take_keyboard(telegram_id=telegram_id, lead_id=lead["ID"])
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_message(chat_id=telegram_id,
                               text=text["value"],
                               reply_markup=reply_markup)
        return {"success": True}
    except Exception as e:
        import traceback
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–≥–µ–Ω—Ç—É {telegram_id}: {e}")
        traceback.print_exc()
        return {"success": False}


'''def –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è'''
async def schedule_comment_reminder(lead, agent, state: FSMContext):
    await asyncio.sleep(30)  # 10 –º–∏–Ω—É—Ç
    print("GOOOOOOOOOOOOOOO")
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    is_not_comment = await check_is_comment_by_lead(lead=lead)
    if not is_not_comment["success"]:
        print("STOOOOOOOOOOOOOOOOP")
        return {"success": False}
    print("GOOOOOOOOOOOOOOO2")
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = await create_text_send_message(telegram_id=agent.telegram_id, key_msg="notification_of_comment")
    if not text["success"]:
        return {"success": False}
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        sent_message: Message = await bot.send_message(
            chat_id=agent.telegram_id,
            text=text["value"]
        )
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –≤ FSMContext
        await state.update_data(notification_comment_message_id=sent_message.message_id)
        return {"success": True}
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")
        return {"success": False}


'''–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞'''
# async def can_agent_take_lead(agent_user_id: str) -> tuple[bool, list[str]]:
#     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∞–≥–µ–Ω—Ç—É –±—Ä–∞—Ç—å –ª–∏–¥—ã."""
#     reasons = []
#
#     # 1. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–ª–∞
#     overdue_tasks = await get_overdue_activities(agent_user_id)
#     if overdue_tasks:
#         reasons.append(f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–ª–∞: {len(overdue_tasks)}")
#
#     # # 3. –ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
#     # no_followup = await get_leads_without_followup(int(agent_user_id))
#     # if no_followup:
#     #     reasons.append(f"üü° –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: {len(no_followup)}")
#
#     return len(reasons) == 0, reasons


# async def get_overdue_activities(agent_id):
#     result = await post_bitrix_request_aio("crm.activity.list", {
#         "filter": {
#             "RESPONSIBLE_ID": agent_id,
#             "<DEADLINE": datetime.now().isoformat(),
#             "COMPLETED": "N"
#         }
#     })
#     return result.get("result", [])
#
# async def get_leads_without_followup(agent_id: int) -> list[dict]:
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥—ã –∞–≥–µ–Ω—Ç–∞
#     leads_response = await post_bitrix_request_aio("crm.deal.list", {
#         "filter": {
#             "ASSIGNED_BY_ID": agent_id,
#             "!STATUS_ID": ["WON", "LOSE", "APOLOGY"],  # –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
#         },
#         "select": ["ID", "TITLE"]
#     })
#
#     leads = leads_response.get("result", [])
#     leads_without_task = []
#
#     for lead in leads:
#         lead_id = lead["ID"]
#
#         # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–µ–ª–∞ –ø–æ —ç—Ç–æ–º—É –ª–∏–¥—É
#         activities = await post_bitrix_request_aio("crm.activity.list", {
#             "filter": {
#                 "OWNER_TYPE_ID": 2,  # 2 = Deal
#                 "OWNER_ID": lead_id,
#                 "COMPLETED": "N"
#             },
#             "select": ["DEADLINE"]
#         })
#
#         has_future_task = False
#         for activity in activities.get("result", []):
#             deadline_str = activity.get("DEADLINE")
#             if not deadline_str:
#                 continue
#
#             try:
#                 deadline_dt = datetime.fromisoformat(deadline_str.replace("Z", "+00:00"))
#                 if deadline_dt > datetime.now(timezone.utc):
#                     has_future_task = True
#                     break
#             except Exception:
#                 continue
#
#         if not has_future_task:
#             leads_without_task.append(lead)
#
#     return leads_without_task


async def get_open_tasks(agent_id: int) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–¥–µ–ª) –∞–≥–µ–Ω—Ç–∞.
    """
    response = await post_bitrix_request_aio("crm.activity.list", {
        "filter": {
            "RESPONSIBLE_ID": agent_id,
            "COMPLETED": "N"
        },
        "select": ["ID", "OWNER_ID", "OWNER_TYPE_ID", "SUBJECT", "OWNER_TYPE"]
    })
    return response.get("result", [])

def format_task_links(tasks: list[dict]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    lines = []
    for task in tasks:
        owner_type = task.get("OWNER_TYPE", "deal").lower()  # –æ–±—ã—á–Ω–æ 'lead' –∏–ª–∏ 'deal'
        owner_id = task["OWNER_ID"]
        subject = task.get("SUBJECT", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        url = f"{settings.BITRIX_URL}{owner_type}/details/{owner_id}/"

        lines.append(f"üîπ [{subject}]({url})")

    return "\n".join(lines)

